<?php

/**
 * @file
 * Core event dispatcher submodule.
 */

use Drupal\block\BlockInterface;
use Drupal\Core\Access\AccessResultInterface;
use Drupal\Core\Asset\AttachedAssetsInterface;
use Drupal\Core\Block\BlockPluginInterface;
use Drupal\Core\Cache\RefinableCacheableDependencyInterface;
use Drupal\Core\Config\ConfigImporter;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Field\FieldItemListInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Url;
use Drupal\core_event_dispatcher\Event\Block\BlockAccessEvent;
use Drupal\core_event_dispatcher\Event\Block\BlockAlterEvent;
use Drupal\core_event_dispatcher\Event\Block\BlockBuildAlterEvent;
use Drupal\core_event_dispatcher\Event\Block\BlockViewAlterEvent;
use Drupal\core_event_dispatcher\Event\Core\CacheFlushEvent;
use Drupal\core_event_dispatcher\Event\Core\ConfigImportStepsAlterEvent;
use Drupal\core_event_dispatcher\Event\Core\ConfigSchemaInfoAlterEvent;
use Drupal\core_event_dispatcher\Event\Core\CountriesAlterEvent;
use Drupal\core_event_dispatcher\Event\Core\CronEvent;
use Drupal\core_event_dispatcher\Event\Core\DataTypeInfoAlterEvent;
use Drupal\core_event_dispatcher\Event\Core\DisplayVariantPluginAlterEvent;
use Drupal\core_event_dispatcher\Event\Core\LayoutAlterEvent;
use Drupal\core_event_dispatcher\Event\Core\MailAlterEvent;
use Drupal\core_event_dispatcher\Event\Core\MailBackendInfoAlterEvent;
use Drupal\core_event_dispatcher\Event\Core\QueueInfoAlterEvent;
use Drupal\core_event_dispatcher\Event\Core\RebuildEvent;
use Drupal\core_event_dispatcher\Event\Core\ValidationConstraintAlterEvent;
use Drupal\core_event_dispatcher\Event\Entity\EntityAccessEvent;
use Drupal\core_event_dispatcher\Event\Entity\EntityBaseFieldInfoAlterEvent;
use Drupal\core_event_dispatcher\Event\Entity\EntityBaseFieldInfoEvent;
use Drupal\core_event_dispatcher\Event\Entity\EntityBuildDefaultsAlterEvent;
use Drupal\core_event_dispatcher\Event\Entity\EntityBundleFieldInfoAlterEvent;
use Drupal\core_event_dispatcher\Event\Entity\EntityCreateAccessEvent;
use Drupal\core_event_dispatcher\Event\Entity\EntityCreateEvent;
use Drupal\core_event_dispatcher\Event\Entity\EntityDeleteEvent;
use Drupal\core_event_dispatcher\Event\Entity\EntityExtraFieldInfoAlterEvent;
use Drupal\core_event_dispatcher\Event\Entity\EntityExtraFieldInfoEvent;
use Drupal\core_event_dispatcher\Event\Entity\EntityFieldAccessEvent;
use Drupal\core_event_dispatcher\Event\Entity\EntityInsertEvent;
use Drupal\core_event_dispatcher\Event\Entity\EntityLoadEvent;
use Drupal\core_event_dispatcher\Event\Entity\EntityOperationAlterEvent;
use Drupal\core_event_dispatcher\Event\Entity\EntityOperationEvent;
use Drupal\core_event_dispatcher\Event\Entity\EntityPredeleteEvent;
use Drupal\core_event_dispatcher\Event\Entity\EntityPresaveEvent;
use Drupal\core_event_dispatcher\Event\Entity\EntityTranslationDeleteEvent;
use Drupal\core_event_dispatcher\Event\Entity\EntityTranslationInsertEvent;
use Drupal\core_event_dispatcher\Event\Entity\EntityTypeAlterEvent;
use Drupal\core_event_dispatcher\Event\Entity\EntityTypeBuildEvent;
use Drupal\core_event_dispatcher\Event\Entity\EntityUpdateEvent;
use Drupal\core_event_dispatcher\Event\Entity\EntityViewAlterEvent;
use Drupal\core_event_dispatcher\Event\Entity\EntityViewEvent;
use Drupal\core_event_dispatcher\Event\File\ArchiverInfoAlterEvent;
use Drupal\core_event_dispatcher\Event\File\FileDownloadEvent;
use Drupal\core_event_dispatcher\Event\File\FileMimetypeMappingAlterEvent;
use Drupal\core_event_dispatcher\Event\File\FileTransferInfoAlterEvent;
use Drupal\core_event_dispatcher\Event\File\FileTransferInfoEvent;
use Drupal\core_event_dispatcher\Event\File\FileUrlAlterEvent;
use Drupal\core_event_dispatcher\Event\Form\FormAlterEvent;
use Drupal\core_event_dispatcher\Event\Form\FormBaseAlterEvent;
use Drupal\core_event_dispatcher\Event\Form\FormIdAlterEvent;
use Drupal\core_event_dispatcher\Event\Language\LanguageSwitchLinksAlterEvent;
use Drupal\core_event_dispatcher\Event\Menu\MenuLocalTasksAlterEvent;
use Drupal\core_event_dispatcher\Event\Theme\JsAlterEvent;
use Drupal\core_event_dispatcher\Event\Theme\LibraryInfoAlterEvent;
use Drupal\core_event_dispatcher\Event\Theme\PageAttachmentsEvent;
use Drupal\core_event_dispatcher\Event\Theme\PageBottomEvent;
use Drupal\core_event_dispatcher\Event\Theme\PageTopEvent;
use Drupal\core_event_dispatcher\Event\Theme\TemplatePreprocessDefaultVariablesAlterEvent;
use Drupal\core_event_dispatcher\Event\Theme\ThemeEvent;
use Drupal\core_event_dispatcher\Event\Theme\ThemeRegistryAlterEvent;
use Drupal\core_event_dispatcher\Event\Theme\ThemesInstalledEvent;
use Drupal\core_event_dispatcher\Event\Theme\ThemeSuggestionsAlterEvent;
use Drupal\core_event_dispatcher\Event\Theme\ThemeSuggestionsAlterIdEvent;
use Drupal\core_event_dispatcher\Event\Token\TokensInfoEvent;
use Drupal\core_event_dispatcher\Event\Token\TokensReplacementEvent;

// Core.
// @todo hook_mail()
//
// Entity.
// @todo hook_entity_view_mode_info_alter()
// @todo hook_entity_bundle_info()
// @todo hook_entity_bundle_info_alter()
// @todo hook_entity_bundle_create()
// @todo hook_entity_bundle_delete()
// @todo hook_entity_revision_create()
// @todo hook_entity_preload()
// @todo hook_entity_storage_load()
// @todo hook_entity_translation_create()
// @todo hook_entity_revision_delete()
// @todo hook_entity_prepare_view()
// @todo hook_entity_view_mode_alter()
// @todo hook_entity_view_display_alter()
// @todo hook_entity_display_build_alter()
// @todo hook_entity_prepare_form()
// @todo hook_entity_form_display_alter()
// @todo hook_entity_bundle_field_info()
// @todo hook_entity_field_storage_info()
// @todo hook_entity_field_storage_info_alter()
// @todo hook_entity_field_access_alter()
// @todo hook_entity_field_values_init()
//
// Form.
// @todo hook_ajax_render_alter()
// @todo hook_batch_alter()
//
// Language.
// @todo hook_transliteration_overrides_alter()
//
// Theme.
// @todo hook_form_system_theme_settings_alter()
// @todo hook_themes_uninstalled()
// @todo hook_extension()
// @todo hook_render_template()
// @todo hook_element_info_alter()
// @todo hook_library_info_build()
// @todo hook_js_settings_build()
// @todo hook_js_settings_alter()
// @todo hook_css_alter()
// @todo hook_page_attachments_alter()
//
// Token.
// @todo hook_tokens_alter()
// @todo hook_token_info_alter()

/**
 * Implements hook_block_view_alter().
 */
function core_event_dispatcher_block_view_alter(array &$build, BlockPluginInterface $block) {
  /** @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager.legacy');
  $manager->register(new BlockViewAlterEvent($build, $block));
}

/**
 * Implements hook_block_build_alter().
 *
 * {@inheritdoc}
 */
function core_event_dispatcher_block_build_alter(array &$build, BlockPluginInterface $block) {
  /** @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager.legacy');
  $manager->register(new BlockBuildAlterEvent($build, $block));
}

/**
 * Implements hook_block_access().
 */
function core_event_dispatcher_block_access(BlockInterface $block, $operation, AccountInterface $account): AccessResultInterface {
  /** @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager.legacy');
  $event = new BlockAccessEvent($block, $operation, $account);
  $manager->register($event);

  return $event->getAccessResult();
}

/**
 * Implements hook_block_alter().
 */
function core_event_dispatcher_block_alter(&$definitions) {
  /** @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager.legacy');
  $manager->register(new BlockAlterEvent($definitions));
}

/**
 * Implements hook_cron().
 *
 * {@inheritdoc}
 */
function core_event_dispatcher_cron() {
  /** @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager.legacy');
  $manager->register(new CronEvent());
}

/**
 * Implements hook_data_type_info_alter().
 */
function core_event_dispatcher_data_type_info_alter(&$dataTypes) {
  /** @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager.legacy');
  $manager->register(new DataTypeInfoAlterEvent($dataTypes));
}

/**
 * Implements hook_queue_info_alter().
 */
function core_event_dispatcher_queue_info_alter(&$queues) {
  /** @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager.legacy');
  $manager->register(new QueueInfoAlterEvent($queues));
}

/**
 * Implements hook_mail_alter().
 */
function core_event_dispatcher_mail_alter(&$message) {
  /** @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager.legacy');
  $manager->register(new MailAlterEvent($message));
}

/**
 * Implements hook_mail_backend_info_alter().
 */
function core_event_dispatcher_mail_backend_info_alter(&$info) {
  /** @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager.legacy');
  $manager->register(new MailBackendInfoAlterEvent($info));
}

/**
 * Implements hook_countries_alter().
 */
function core_event_dispatcher_countries_alter(&$countries) {
  /** @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager.legacy');
  $manager->register(new CountriesAlterEvent($countries));
}

/**
 * Implements hook_display_variant_plugin_alter().
 */
function core_event_dispatcher_display_variant_plugin_alter(array &$definitions) {
  /** @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager.legacy');
  $manager->register(new DisplayVariantPluginAlterEvent($definitions));
}

/**
 * Implements hook_layout_alter().
 */
function core_event_dispatcher_layout_alter(array &$definitions) {
  /** @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager.legacy');
  $manager->register(new LayoutAlterEvent($definitions));
}

/**
 * Implements hook_cache_flush().
 */
function core_event_dispatcher_cache_flush() {
  /** @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager.legacy');
  $manager->register(new CacheFlushEvent());
}

/**
 * Implements hook_rebuild().
 */
function core_event_dispatcher_rebuild() {
  /** @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager.legacy');
  $manager->register(new RebuildEvent());
}

/**
 * Implements hook_config_import_steps_alter().
 */
function core_event_dispatcher_config_import_steps_alter(array &$syncSteps, ConfigImporter $configImporter) {
  /** @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager.legacy');
  $manager->register(new ConfigImportStepsAlterEvent($syncSteps, $configImporter));
}

/**
 * Implements hook_config_schema_info_alter().
 */
function core_event_dispatcher_config_schema_info_alter(array &$definitions) {
  /** @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager.legacy');
  $manager->register(new ConfigSchemaInfoAlterEvent($definitions));
}

/**
 * Implements hook_validation_constraint_alter().
 */
function core_event_dispatcher_validation_constraint_alter(array &$definitions) {
  /** @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager.legacy');
  $manager->register(new ValidationConstraintAlterEvent($definitions));
}

/**
 * Implements hook_entity_access().
 *
 * {@inheritdoc}
 */
function core_event_dispatcher_entity_access(EntityInterface $entity, string $operation, AccountInterface $account) {
  /** @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager.legacy');
  $event = new EntityAccessEvent($entity, $operation, $account);
  $manager->register($event);

  return $event->getAccessResult();
}

/**
 * Implements hook_entity_create_access().
 */
function core_event_dispatcher_entity_create_access(AccountInterface $account, array $context, string $entityBundle = NULL): AccessResultInterface {
  /** @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager.legacy');
  $event = new EntityCreateAccessEvent($account, $context, $entityBundle);
  $manager->register($event);

  return $event->getAccessResult();
}

/**
 * Implements hook_entity_type_build().
 *
 * {@inheritdoc}
 */
function core_event_dispatcher_entity_type_build(array &$entityTypes) {
  /** @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager.legacy');
  $manager->register(new EntityTypeBuildEvent($entityTypes));
}

/**
 * Implements hook_entity_type_alter().
 *
 * {@inheritdoc}
 */
function core_event_dispatcher_entity_type_alter(array &$entityTypes) {
  /** @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager.legacy');
  $manager->register(new EntityTypeAlterEvent($entityTypes));
}

/**
 * Implements hook_entity_create().
 *
 * {@inheritdoc}
 */
function core_event_dispatcher_entity_create(EntityInterface $entity) {
  /** @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager.legacy');
  $manager->register(new EntityCreateEvent($entity));
}

/**
 * Implements hook_entity_load().
 *
 * {@inheritdoc}
 */
function core_event_dispatcher_entity_load(array $entities, string $entityTypeId) {
  /** @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager.legacy');
  $manager->register(new EntityLoadEvent($entities, $entityTypeId));
}

/**
 * Implements hook_entity_presave().
 *
 * {@inheritdoc}
 */
function core_event_dispatcher_entity_presave(EntityInterface $entity) {
  /** @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager.legacy');
  $manager->register(new EntityPresaveEvent($entity));
}

/**
 * Implements hook_entity_build_defaults_alter().
 *
 * {@inheritdoc}
 */
function core_event_dispatcher_entity_build_defaults_alter(
  array &$build,
  EntityInterface $entity,
  $viewMode
) {
  /** @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager.legacy');
  $manager->register(new EntityBuildDefaultsAlterEvent($build, $entity, (string) $viewMode));
}

/**
 * Implements hook_entity_insert().
 *
 * {@inheritdoc}
 */
function core_event_dispatcher_entity_insert(EntityInterface $entity) {
  /** @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager.legacy');
  $manager->register(new EntityInsertEvent($entity));
}

/**
 * Implements hook_entity_update().
 *
 * {@inheritdoc}
 */
function core_event_dispatcher_entity_update(EntityInterface $entity) {
  /** @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager.legacy');
  $manager->register(new EntityUpdateEvent($entity));
}

/**
 * Implements hook_entity_translation_insert().
 *
 * {@inheritdoc}
 */
function core_event_dispatcher_entity_translation_insert(EntityInterface $translation) {
  /** @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager.legacy');
  $manager->register(new EntityTranslationInsertEvent($translation));
}

/**
 * Implements hook_entity_translation_delete().
 *
 * {@inheritdoc}
 */
function core_event_dispatcher_entity_translation_delete(EntityInterface $translation) {
  /** @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager.legacy');
  $manager->register(new EntityTranslationDeleteEvent($translation));
}

/**
 * Implements hook_entity_predelete().
 *
 * {@inheritdoc}
 */
function core_event_dispatcher_entity_predelete(EntityInterface $entity) {
  /** @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager.legacy');
  $manager->register(new EntityPredeleteEvent($entity));
}

/**
 * Implements hook_entity_delete().
 *
 * {@inheritdoc}
 */
function core_event_dispatcher_entity_delete(EntityInterface $entity) {
  /** @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager.legacy');
  $manager->register(new EntityDeleteEvent($entity));
}

/**
 * Implements hook_entity_view().
 *
 * {@inheritdoc}
 */
function core_event_dispatcher_entity_view(
  array &$build,
  EntityInterface $entity,
  EntityViewDisplayInterface $display,
  string $viewMode
) {
  /** @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager.legacy');
  $manager->register(new EntityViewEvent($build, $entity, $display, $viewMode));
}

/**
 * Implements hook_entity_view_alter().
 *
 * {@inheritdoc}
 */
function core_event_dispatcher_entity_view_alter(
  array &$build,
  EntityInterface $entity,
  EntityViewDisplayInterface $display
) {
  /** @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager.legacy');
  $manager->register(new EntityViewAlterEvent($build, $entity, $display));
}

/**
 * Implements hook_entity_base_field_info().
 *
 * {@inheritdoc}
 */
function core_event_dispatcher_entity_base_field_info(EntityTypeInterface $entityType) {
  /** @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager.legacy');
  $event = new EntityBaseFieldInfoEvent($entityType);
  $manager->register($event);
  return $event->getFields();
}

/**
 * Implements hook_entity_base_field_info_alter().
 *
 * {@inheritdoc}
 */
function core_event_dispatcher_entity_base_field_info_alter(array &$fields, EntityTypeInterface $entityType) {
  /** @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager.legacy');
  $manager->register(new EntityBaseFieldInfoAlterEvent($fields, $entityType));
}

/**
 * Implements hook_entity_bundle_field_info_alter().
 *
 * {@inheritdoc}
 */
function core_event_dispatcher_entity_bundle_field_info_alter(array &$fields, EntityTypeInterface $entityType, string $bundle) {
  /** @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager.legacy');
  $manager->register(new EntityBundleFieldInfoAlterEvent($fields, $entityType, $bundle));
}

/**
 * Implements hook_entity_operation().
 *
 * {@inheritdoc}
 */
function core_event_dispatcher_entity_operation(EntityInterface $entity) {
  /** @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager.legacy');
  $event = new EntityOperationEvent($entity);
  $manager->register($event);

  return $event->getOperations();
}

/**
 * Implements hook_entity_operation_alter().
 *
 * {@inheritdoc}
 */
function core_event_dispatcher_entity_operation_alter(array &$operations, EntityInterface $entity) {
  /** @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager.legacy');
  $manager->register(new EntityOperationAlterEvent($operations, $entity));
}

/**
 * Implements hook_entity_field_access().
 *
 * {@inheritdoc}
 */
function core_event_dispatcher_entity_field_access(
  string $operation,
  FieldDefinitionInterface $fieldDefinition,
  AccountInterface $account,
  FieldItemListInterface $items = NULL
) {
  /** @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager.legacy');
  $event = new EntityFieldAccessEvent($operation, $fieldDefinition, $account, $items);
  $manager->register($event);
  return $event->getAccessResult();
}

/**
 * Implements hook_entity_extra_field_info().
 */
function core_event_dispatcher_entity_extra_field_info() {
  /** @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager.legacy');
  $event = new EntityExtraFieldInfoEvent();
  $manager->register($event);
  return $event->getFieldInfo();
}

/**
 * Implements hook_entity_extra_field_info_alter().
 *
 * {@inheritdoc}
 */
function core_event_dispatcher_entity_extra_field_info_alter(array &$info) {
  /** @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager.legacy');
  $manager->register(new EntityExtraFieldInfoAlterEvent($info));
}

/**
 * Implements hook_file_download().
 */
function core_event_dispatcher_file_download($uri) {
  /** @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager.legacy');
  $event = new FileDownloadEvent($uri);
  $manager->register($event);
  return $event->isForbidden() ? -1 : $event->getHeaders();
}

/**
 * Implements hook_file_url_alter().
 */
function core_event_dispatcher_file_url_alter(&$uri) {
  /** @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager.legacy');
  $manager->register(new FileUrlAlterEvent($uri));
}

/**
 * Implements hook_file_mimetype_mapping_alter().
 */
function core_event_dispatcher_file_mimetype_mapping_alter(&$mapping) {
  /** @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager.legacy');
  $manager->register(new FileMimetypeMappingAlterEvent($mapping));
}

/**
 * Implements hook_archiver_info_alter().
 */
function core_event_dispatcher_archiver_info_alter(&$info) {
  /** @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager.legacy');
  $manager->register(new ArchiverInfoAlterEvent($info));
}

/**
 * Implements hook_filetransfer_info().
 */
function core_event_dispatcher_filetransfer_info(): array {
  /** @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager.legacy');
  $event = new FileTransferInfoEvent();
  $manager->register($event);
  return $event->getDefinitions();
}

/**
 * Implements hook_filetransfer_info_alter().
 */
function core_event_dispatcher_filetransfer_info_alter(&$info) {
  /** @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager.legacy');
  $manager->register(new FileTransferInfoAlterEvent($info));
}

/**
 * Implements hook_form_alter().
 *
 * {@inheritdoc}
 */
function core_event_dispatcher_form_alter(array &$form, FormStateInterface $formState, string $formId) {
  /** @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager.legacy');
  $manager->register(new FormAlterEvent($form, $formState, $formId));

  $buildInfo = $formState->getBuildInfo();
  if (!empty($buildInfo['base_form_id'])) {
    $manager->register(new FormBaseAlterEvent($form, $formState, $formId));
  }
  $manager->register(new FormIdAlterEvent($form, $formState, $formId));
}

/**
 * Implements hook_language_switch_links_alter().
 *
 * {@inheritdoc}
 */
function core_event_dispatcher_language_switch_links_alter(array &$links, string $type, Url $path) {
  /** @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager.legacy');
  $manager->register(new LanguageSwitchLinksAlterEvent($links, $type, $path));
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function core_event_dispatcher_menu_local_tasks_alter(&$data, $routeName, RefinableCacheableDependencyInterface $cacheability) {
  /** @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager.legacy');
  $manager->register(new MenuLocalTasksAlterEvent($data, $routeName, $cacheability));
}

/**
 * Implements hook_theme_suggestions_alter().
 *
 * {@inheritdoc}
 */
function core_event_dispatcher_theme_suggestions_alter(array &$suggestions, array $variables, string $hook) {
  /** @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager.legacy');
  $manager->register(new ThemeSuggestionsAlterEvent($suggestions, $variables, $hook));
  $manager->register(new ThemeSuggestionsAlterIdEvent($suggestions, $variables, $hook));
}

/**
 * Implements hook_themes_installed().
 *
 * {@inheritdoc}
 */
function core_event_dispatcher_themes_installed(array $themeList) {
  /** @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager.legacy');
  $manager->register(new ThemesInstalledEvent($themeList));
}

/**
 * Implements hook_js_alter().
 *
 * {@inheritdoc}
 */
function core_event_dispatcher_js_alter(array &$javascript, AttachedAssetsInterface $assets) {
  /** @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager.legacy');
  $manager->register(new JsAlterEvent($javascript, $assets));
}

/**
 * Implements hook_library_info_alter().
 *
 * {@inheritdoc}
 */
function core_event_dispatcher_library_info_alter(array &$libraries, string $extension) {
  /** @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager.legacy');
  $manager->register(new LibraryInfoAlterEvent($libraries, $extension));
}

/**
 * Implements hook_page_attachments().
 *
 * {@inheritdoc}
 */
function core_event_dispatcher_page_attachments(array &$attachments) {
  /** @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager.legacy');
  $manager->register(new PageAttachmentsEvent($attachments));
}

/**
 * Implements hook_page_top().
 *
 * {@inheritdoc}
 */
function core_event_dispatcher_page_top(array &$pageTop) {
  /** @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager.legacy');
  $manager->register(new PageTopEvent($pageTop));
}

/**
 * Implements hook_page_bottom().
 *
 * {@inheritdoc}
 */
function core_event_dispatcher_page_bottom(array &$pageBottom) {
  /** @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager.legacy');
  $manager->register(new PageBottomEvent($pageBottom));
}

/**
 * Implements hook_theme().
 *
 * {@inheritdoc}
 */
function core_event_dispatcher_theme(array $existing) {
  /** @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager');
  $event = new ThemeEvent($existing);
  $manager->register($event);
  return $event->getNewThemes();
}

/**
 * Implements hook_theme_registry_alter().
 *
 * {@inheritdoc}
 */
function core_event_dispatcher_theme_registry_alter(array &$themeRegistry) {
  /** @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager.legacy');
  $manager->register(new ThemeRegistryAlterEvent($themeRegistry));
}

/**
 * Implements hook_template_preprocess_default_variables_alter().
 *
 * {@inheritdoc}
 */
function core_event_dispatcher_template_preprocess_default_variables_alter(array &$variables) {
  /** @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager.legacy');
  $manager->register(new TemplatePreprocessDefaultVariablesAlterEvent($variables));
}

/**
 * Implements hook_tokens().
 *
 * {@inheritdoc}
 */
function core_event_dispatcher_tokens(
  string $type,
  array $tokens,
  array $data,
  array $options,
  BubbleableMetadata $bubbleableMetadata
) {
  /** @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager.legacy');
  $event = new TokensReplacementEvent($type, $tokens, $data, $options, $bubbleableMetadata);
  $manager->register($event);
  return $event->getReplacementValues();
}

/**
 * Implements hook_token_info().
 *
 * {@inheritdoc}
 */
function core_event_dispatcher_token_info() {
  /** @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager.legacy');
  $event = new TokensInfoEvent();
  $manager->register($event);
  return [
    'types' => $event->getTokenTypes(),
    'tokens' => $event->getTokens(),
  ];
}
