<?php

/**
 * @file
 * Allows Allowed Formatss to be used to create Schema.org relationships.
 */

declare(strict_types = 1);

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\schemadotorg\Element\SchemaDotOrgSettings;

/**
 * Implements hook_help().
 */
function schemadotorg_allowed_formats_help(string $route_name, RouteMatchInterface $route_match): string|array|null {
  /** @var \Drupal\schemadotorg\SchemaDotOrgHelpManagerInterface $help_manager */
  $help_manager = \Drupal::service('schemadotorg.help_manager');
  return $help_manager->buildHelpPage($route_name, $route_match);
}

/**
 * Implements hook_modules_installed().
 */
function schemadotorg_allowed_formats_modules_installed(array $modules): void {
  \Drupal::moduleHandler()->loadInclude('schemadotorg_allowed_formats', 'install');
  _schemadotorg_allowed_formats_modules_installed($modules);
}

/**
 * Implements hook_schemadotorg_property_field_alter().
 */
function schemadotorg_allowed_formats_schemadotorg_property_field_alter(
  string $schema_type,
  string $schema_property,
  array &$field_storage_values,
  array &$field_values,
  ?string &$widget_id,
  array &$widget_settings,
  ?string &$formatter_id,
  array &$formatter_settings
): void {
  if (!in_array($field_storage_values['type'], _allowed_formats_field_types())) {
    return;
  }

  $config = \Drupal::config('schemadotorg_allowed_formats.settings');

  // Set default allowed formats.
  $default_allowed_formats = $config->get('default_allowed_formats');
  $property_allowed_formats = $config->get('property_allowed_formats');
  $allowed_formats = $property_allowed_formats["$schema_type--$schema_property"]
    ?? $property_allowed_formats[$schema_property]
    ?? $default_allowed_formats;
  if ($allowed_formats) {
    $field_values['third_party_settings']['allowed_formats']['allowed_formats'] = $allowed_formats;
  }

  // Set default hide help.
  $default_hide_help = $config->get('default_hide_help');
  if ($default_hide_help) {
    $widget_settings['third_party_settings']['allowed_formats']['hide_help'] = '1';
  }

  // Set default hide guidelines.
  $default_hide_guidelines = $config->get('default_hide_guidelines');
  if ($default_hide_guidelines) {
    $widget_settings['third_party_settings']['allowed_formats']['hide_guidelines'] = '1';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function schemadotorg_allowed_formats_form_schemadotorg_properties_settings_form_alter(array &$form, FormStateInterface $form_state): void {
  $config = \Drupal::configFactory()->getEditable('schemadotorg_allowed_formats.settings');

  $allowed_formats_options = [];
  foreach (filter_formats() as $format) {
    $allowed_formats_options[$format->id()] = $format->label();
  }

  $form['schemadotorg_allowed_formats'] = [
    '#type' => 'details',
    '#title' => t('Allowed formats settings'),
    '#open' => TRUE,
    '#tree' => TRUE,
  ];
  $form['schemadotorg_allowed_formats']['default_hide_help'] = [
    '#type' => 'checkbox',
    '#title' => t('Hide the help link <em>About text formats</em>.'),
    '#description' => t('If checked, the help link will be hidden when text format widgets are created.'),
    '#default_value' => $config->get('default_hide_help'),
  ];
  $form['schemadotorg_allowed_formats']['default_hide_guidelines'] = [
    '#type' => 'checkbox',
    '#title' => t('Hide text format guidelines.'),
    '#description' => t('If checked, the text format guidelines will be hidden when text format widgets are created.'),
    '#default_value' => $config->get('default_hide_guidelines'),
  ];
  $form['schemadotorg_allowed_formats']['default_allowed_formats'] = [
    '#type' => 'checkboxes',
    '#title' => t('Default allowed formats'),
    '#description' => t('Restrict which text formats are allowed, given the user has the required permissions. If no text formats are selected, then all the ones the user has access to will be available.'),
    '#options' => $allowed_formats_options,
    '#default_value' => $config->get('default_allowed_formats'),
    '#element_validate' => [['\Drupal\schemadotorg\Utility\SchemaDotOrgElementHelper', 'validateMultipleOptions']],
  ];
  $form['schemadotorg_allowed_formats']['property_allowed_formats'] = [
    '#type' => 'schemadotorg_settings',
    '#title' => t('Property allowed formats'),
    '#description' => t('Enter allowed formats for specific Schema.org properties.'),
    '#description_link' => 'properties',
    '#settings_type' => SchemaDotOrgSettings::INDEXED_GROUPED,
    '#settings_format' => 'schemaProperty|full_html,basic_html or SchemaType--schemaProperty|full_html,basic_html',
    '#default_value' => $config->get('property_allowed_formats'),
  ];

  // Add submit callback.
  $form['#submit'][] = 'schemadotorg_allowed_formats_settings_form_submit';
}

/**
 * Form submission handler for schemadotorg_properties_settings_form.
 *
 * @see schemadotorg_allowed_formats_form_schemadotorg_properties_settings_form_alter()
 */
function schemadotorg_allowed_formats_settings_form_submit(array &$form, FormStateInterface $form_state): void {
  $config = \Drupal::configFactory()->getEditable('schemadotorg_allowed_formats.settings');
  $values = $form_state->getValue('schemadotorg_allowed_formats');
  foreach ($values as $key => $value) {
    $config->set($key, $value);
  }
  $config->save();
}
