<?php

/**
 * @file
 * Allows Inline Entity Forms to be used to create Schema.org relationships.
 */

declare(strict_types = 1);

use Drupal\auto_entitylabel\AutoEntityLabelManager;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\schemadotorg\Element\SchemaDotOrgSettings;
use Drupal\schemadotorg\SchemaDotOrgMappingInterface;

/**
 * Implements hook_help().
 */
function schemadotorg_auto_entitylabel_help(string $route_name, RouteMatchInterface $route_match): string|array|null {
  /** @var \Drupal\schemadotorg\SchemaDotOrgHelpManagerInterface $help_manager */
  $help_manager = \Drupal::service('schemadotorg.help_manager');
  return $help_manager->buildHelpPage($route_name, $route_match);
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 *
 * Creates automatic entity label settings for a Schema.org mapping.
 *
 * @see \Drupal\auto_entitylabel\Form\AutoEntityLabelForm::submitForm
 */
function schemadotorg_auto_entitylabel_schemadotorg_mapping_insert(SchemaDotOrgMappingInterface $mapping): void {
  /** @var \Drupal\schemadotorg\SchemaDotOrgSchemaTypeManagerInterface $schema_type_manager */
  $schema_type_manager = \Drupal::service('schemadotorg.schema_type_manager');

  // Get the Schema.or type's auto entity label settings.
  $schema_type = $mapping->getSchemaType();
  $default_types = \Drupal::config('schemadotorg_auto_entitylabel.settings')
    ->get('default_types');
  $settings = NULL;
  foreach ($default_types as $default_type => $default_type_settings) {
    if ($schema_type_manager->isSubTypeOf($schema_type, $default_type)) {
      $settings = $default_type_settings;
      break;
    }
  }
  if (empty($settings)) {
    return;
  }

  // Get entity type and bundle.
  $entity_type_id = $mapping->getTargetEntityTypeId();
  $bundle = $mapping->getTargetBundle();

  // Make sure the target entity type support bundling.
  // Comparing the entity type id and bundle is the easiest way to make this
  // determination. For example, for users the entity type and bundle are
  // the same.
  if ($entity_type_id === $bundle) {
    return;
  }

  // Get settings with default values.
  $values = $settings + [
    'status' => AutoEntityLabelManager::ENABLED,
    'pattern' => '',
    'escape' => FALSE,
    'preserve_titles' => FALSE,
  ];

  // Replace pattern Schema.org properties with tokens.
  $pattern = $values['pattern'];
  $schema_properties = $mapping->getSchemaProperties();
  foreach ($schema_properties as $field_name => $schema_property) {
    $pattern = str_replace("[$schema_property]", "[$entity_type_id:$field_name]", $pattern);
  }
  $values['pattern'] = $pattern;

  // Set values in configuration.
  $config_name = 'auto_entitylabel.settings.' . $entity_type_id . '.' . $bundle;
  $config = \Drupal::configFactory()->getEditable($config_name);
  foreach ($values as $name => $value) {
    $config->set($name, $value);
  }

  // Set dependencies.
  // Look up the content entity's bundle entity's config prefix.
  $bundle_entity_type = \Drupal::entityTypeManager()->getStorage($entity_type_id)
    ->getEntityType()
    ->getBundleEntityType();
  $config_prefix = \Drupal::entityTypeManager()->getStorage($bundle_entity_type)
    ->getEntityType()
    ->getConfigPrefix();
  $config->set('dependencies', ['config' => [$config_prefix . '.' . $bundle]]);

  // Save configuration.
  $config->save();
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function schemadotorg_auto_entitylabel_form_schemadotorg_types_settings_form_alter(array &$form, FormStateInterface $form_state): void {
  $config = \Drupal::configFactory()->getEditable('schemadotorg_auto_entitylabel.settings');

  $form['schemadotorg_auto_entitylabel'] = [
    '#type' => 'details',
    '#title' => t('Automatic entity labels settings'),
    '#open' => TRUE,
    '#tree' => TRUE,
  ];
  $form['schemadotorg_auto_entitylabel']['default_types'] = [
    '#type' => 'schemadotorg_settings',
    '#settings_type' => SchemaDotOrgSettings::ASSOCIATIVE_GROUPED,
    '#settings_format' => 'SchemaType|status:1,pattern:[propertyName01] [propertyName02]',
    '#title' => t('Default Schema.org type auto entity labels'),
    '#description' => t('Enter default Schema.org type auto entity label settings.'),
    '#description_link' => 'types',
    '#default_value' => $config->get('default_types'),
  ];

  // Automatic label generation statuses.
  // The below options are copied from the 'Automatic entity label' form.
  // @see \Drupal\auto_entitylabel\Form\AutoEntityLabelForm::buildForm
  $options = [
    AutoEntityLabelManager::DISABLED => t('Disabled'),
    AutoEntityLabelManager::ENABLED => t('Automatically generate the label and hide the label field'),
    AutoEntityLabelManager::OPTIONAL => t('Automatically generate the label if the label field is left empty'),
    AutoEntityLabelManager::PREFILLED => t('Automatically prefill the label'),
  ];
  $options_description = [
    AutoEntityLabelManager::DISABLED => [
      '#description' => t('Selecting this option will disable the auto labels for the entity.'),
    ],
    AutoEntityLabelManager::ENABLED => [
      '#description' => t('Selecting this option will hide the title field and will generate a new option based on the pattern provided below.'),
    ],
    AutoEntityLabelManager::OPTIONAL => [
      '#description' => t('Selecting this option will make the label field optional and will generate a label if the label field is left empty.'),
    ],
    AutoEntityLabelManager::PREFILLED => [
      '#description' => t('Selecting this option will prefills the label field with the generated pattern provided below. This option provides limited token support because it only prefills the label and it will not be able to replace all the tokens like current node based tokens for ex: [node:nid] because that token has not been generated yet.'),
    ],
  ];
  $options[AutoEntityLabelManager::ENABLED] .= ' [' . t('DEFAULT') . ']';

  $items = [];
  foreach ($options as $value => $text) {
    $items[] = [
      '#prefix' => '<p>',
      '#suffix' => '<p>',
      'text' => [
        '#markup' => $text,
        '#prefix' => '<strong>status:' . $value . ' = ',
        '#suffix' => '</strong></br>',
      ],
      'value' => [
        '#markup' => $options_description[$value]['#description'],
      ],
    ];
  }
  $form['schemadotorg_auto_entitylabel']['status_options'] = [
    '#type' => 'details',
    '#title' => t('Automatic label generation statuses'),
    'items' => $items,
  ];

  // Add submit callback.
  $form['#submit'][] = 'schemadotorg_auto_entitylabel_settings_form_submit';
}

/**
 * Form submission handler for schemadotorg_properties_settings_form.
 *
 * @see schemadotorg_auto_entitylabel_form_schemadotorg_properties_settings_form_alter()
 */
function schemadotorg_auto_entitylabel_settings_form_submit(array &$form, FormStateInterface $form_state): void {
  $config = \Drupal::configFactory()->getEditable('schemadotorg_auto_entitylabel.settings');
  $values = $form_state->getValue('schemadotorg_auto_entitylabel');
  foreach ($values as $key => $value) {
    $config->set($key, $value);
  }
  $config->save();
}
