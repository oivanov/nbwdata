<?php

/**
 * @file
 * Provides development tools for the Schema.org Blueprints module.
 */

declare(strict_types = 1);

use Drupal\Component\Utility\Random;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\node\Entity\NodeType;
use Drupal\node\NodeInterface;
use Drupal\schemadotorg\Entity\SchemaDotOrgMapping;

/**
 * Implements hook_help().
 */
function schemadotorg_devel_help(string $route_name, RouteMatchInterface $route_match): string|array|null {
  if ($route_name === 'schemadotorg_devel.settings') {
    return '<p>' . t('The <em>Schema.org development settings</em> page allows administrators to configure content generation settings.') . '<p>';
  }

  /** @var \Drupal\schemadotorg\SchemaDotOrgHelpManagerInterface $help_manager */
  $help_manager = \Drupal::service('schemadotorg.help_manager');
  return $help_manager->buildHelpPage($route_name, $route_match);
}

/**
 * Implements hook_entity_presave().
 */
function schemadotorg_devel_entity_presave(EntityInterface $entity): void {
  // Check that devel is generating a content entity.
  // @see https://www.drupal.org/project/devel/issues/2582845
  if (empty($entity->devel_generate)
    || !$entity instanceof ContentEntityInterface) {
    return;
  }

  $mapping = SchemaDotOrgMapping::loadByEntity($entity);
  if (!$mapping) {
    return;
  }

  // Get the mapping's properties keyed by property name.
  $schema_properties = array_flip($mapping->getSchemaProperties());

  // Get devel generate property values.
  $property_values = \Drupal::config('schemadotorg_devel.settings')
    ->get('generate_property_values');

  /** @var \Drupal\schemadotorg\SchemaDotOrgSchemaTypeManagerInterface $schema_type_manager */
  $schema_type_manager = \Drupal::service('schemadotorg.schema_type_manager');
  $schema_type = $mapping->getSchemaType();

  // Limit node titles to two words with a max of 25 characters.
  if ($entity instanceof NodeInterface) {
    $random = new Random();
    $node_type = NodeType::load($entity->bundle())->label();
    $node_title = ucwords($random->word(mt_rand(1, 25)) . ' ' . $random->word(mt_rand(1, 25)));
    $entity->set('title', "$node_type - $node_title");
  }

  // Populate the fields.
  foreach ($property_values as $property => $values) {
    // Check Type--property.
    if (str_contains($property, '--')) {
      [$property_schema_type, $property] = explode('--', $property);
      if (!isset($schema_properties[$property])
        || !$schema_type_manager->isSubTypeOf($property_schema_type, $schema_type)) {
        continue;
      }
    }
    elseif (!isset($schema_properties[$property])) {
      continue;
    }

    $field_name = $schema_properties[$property];
    if (!$entity->hasField($field_name)) {
      continue;
    }

    /** @var \Drupal\Core\Field\FieldItemListInterface $field_item_list */
    $field_item_list = $entity->$field_name;

    if (empty($values)) {
      $field_item_list->setValue([]);
    }
    else {
      $main_property = $field_item_list
        ->getFieldDefinition()
        ->getFieldStorageDefinition()
        ->getMainPropertyName();
      foreach ($field_item_list as $item) {
        $item->set($main_property, $values[array_rand($values)]);
      }
    }
  }
}
