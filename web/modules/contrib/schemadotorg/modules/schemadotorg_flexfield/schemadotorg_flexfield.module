<?php

/**
 * @file
 * Allows FlexFields to be used to create Schema.org relationships.
 */

declare(strict_types = 1);

use Drupal\Core\Field\FieldItemInterface;
use Drupal\Core\Field\FieldItemListInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\schemadotorg\Element\SchemaDotOrgSettings;
use Drupal\schemadotorg\Entity\SchemaDotOrgMapping;
use Drupal\schemadotorg\SchemaDotOrgMappingInterface;

/**
 * Implements hook_help().
 */
function schemadotorg_flexfield_help(string $route_name, RouteMatchInterface $route_match): string|array|null {
  /** @var \Drupal\schemadotorg\SchemaDotOrgHelpManagerInterface $help_manager */
  $help_manager = \Drupal::service('schemadotorg.help_manager');
  return $help_manager->buildHelpPage($route_name, $route_match);
}

/**
 * Implements hook_schemadotorg_property_field_type_alter().
 */
function schemadotorg_flexfield_schemadotorg_property_field_type_alter(array &$field_types, string $schema_type, string $schema_property): void {
  $default_properties = _schemadotorg_flexfield_get_default_properties($schema_type, $schema_property);
  if ($default_properties) {
    $field_types = ['flex' => 'flex'] + $field_types;
  }
}

/**
 * Implements hook_schemadotorg_property_field_alter().
 */
function schemadotorg_flexfield_schemadotorg_property_field_alter(
  string $schema_type,
  string $schema_property,
  array &$field_storage_values,
  array &$field_values,
  ?string &$widget_id,
  array|null &$widget_settings,
  ?string &$formatter_id,
  array &$formatter_settings
): void {
  // Make sure the field type is set to 'flex' (field).
  if ($field_storage_values['type'] !== 'flex') {
    return;
  }

  // Check to see if the property has flex field settings.
  $default_properties = _schemadotorg_flexfield_get_default_properties($schema_type, $schema_property);
  if (!$default_properties) {
    return;
  }

  /** @var \Drupal\schemadotorg\SchemaDotOrgEntityFieldManagerInterface $schema_field_manager */
  $schema_field_manager = \Drupal::service('schemadotorg.entity_field_manager');

  $flexfield_schema_type = $default_properties['type'] ?? '';
  $flexfield_schema_properties = $default_properties['properties'] ?? [];

  $weight = 0;
  $field_storage_columns = [];
  $field_settings = [];
  foreach ($flexfield_schema_properties as $schema_property => $data_type) {
    $default_field = $schema_field_manager->getPropertyDefaultField($flexfield_schema_type, $schema_property);
    $name = $default_field['name'];
    $label = $default_field['label'];
    $description = $default_field['description'];

    $field_storage_columns[$name] = [
      'name' => $name,
      'max_length' => '255',
    ];

    $field_settings[$name] = [
      'type' => $data_type,
      'widget_settings' => [
        'label' => $label,
        'description' => $description,
        'required' => 0,
      ],
      'check_empty' => '1',
      'weight' => $weight,
    ];
    $weight++;
  }

  $field_storage_values['settings']['columns'] = $field_storage_columns;

  $field_values['settings'] = [
    'field_settings' => $field_settings,
    'field_type' => 'flex',
  ];

  $widget_id = 'flex_stacked';
  $widget_settings['label'] = '1';
}

/**
 * Implements hook_schemadotorg_jsonld_field_item_alter().
 */
function schemadotorg_flexfield_schemadotorg_jsonld_schema_property_alter(mixed &$value, FieldItemInterface $item): void {
  $mapping = _schemadotorg_flexfield_get_mapping($item);
  if (!$mapping) {
    return;
  }

  $field_name = $item->getFieldDefinition()->getName();
  $mapping_schema_type = $mapping->getSchemaType();
  $schema_property = $mapping->getSchemaPropertyMapping($field_name);

  // Check to see if the property has flex field settings.
  $default_properties = _schemadotorg_flexfield_get_default_properties($mapping_schema_type, $schema_property);
  if (!$default_properties) {
    return;
  }

  /** @var \Drupal\schemadotorg\SchemaDotOrgSchemaTypeManagerInterface $schema_type_manager */
  $schema_type_manager = \Drupal::service('schemadotorg.schema_type_manager');
  /** @var \Drupal\schemadotorg\SchemaDotOrgNamesInterface $schema_names */
  $schema_names = Drupal::service('schemadotorg.names');

  $data = [
    '@type' => $default_properties['type'],
  ];
  $values = $item->getValue();
  foreach ($values as $item_key => $item_value) {
    $item_property = $schema_names->snakeCaseToCamelCase($item_key);
    $has_value = ($item_value !== '' && $item_value !== NULL);
    $is_property = $schema_type_manager->isProperty($item_property);
    if (!$has_value || !$is_property) {
      continue;
    }

    $unit = $schema_type_manager->getPropertyUnit($item_property, $item_value);
    if ($unit) {
      $item_value .= ' ' . $unit;
    }

    $data[$item_property] = $item_value;
  }
  $value = $data;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function schemadotorg_flexfield_form_schemadotorg_properties_settings_form_alter(array &$form, FormStateInterface $form_state): void {
  $config = \Drupal::configFactory()->getEditable('schemadotorg_flexfield.settings');

  $form['schemadotorg_flexfield'] = [
    '#type' => 'details',
    '#title' => t('Flexfield settings'),
    '#open' => TRUE,
    '#tree' => TRUE,
  ];
  $form['schemadotorg_flexfield']['default_properties'] = [
    '#type' => 'schemadotorg_settings',
    '#settings_type' => SchemaDotOrgSettings::ASSOCIATIVE_GROUPED_NAMED,
    '#settings_format' => 'propertyName|SchemaType|propertyName01:data_type,propertyName02:data_type,propertyName03:data_type',
    '#group_name' => 'type',
    '#array_name' => 'properties',
    '#title' => t('Default flex field properties'),
    '#description' => t('Enter Schema.org properties that should be mapped to a Schema.org type using a Flex field.'),
    '#description_link' => 'types',
    '#default_value' => $config->get('default_properties'),
  ];

  // Add submit callback.
  $form['#submit'][] = 'schemadotorg_flexfield_settings_form_submit';
}

/**
 * Form submission handler for schemadotorg_properties_settings_form.
 *
 * @see schemadotorg_flexfield_form_schemadotorg_properties_settings_form_alter()
 */
function schemadotorg_flexfield_settings_form_submit(array &$form, FormStateInterface $form_state): void {
  $config = \Drupal::configFactory()->getEditable('schemadotorg_flexfield.settings');
  $values = $form_state->getValue('schemadotorg_flexfield');
  foreach ($values as $key => $value) {
    $config->set($key, $value);
  }
  $config->save();
}

/**
 * Implements hook_field_widget_form_alter().
 */
function schemadotorg_flexfield_field_widget_form_alter(array &$element, FormStateInterface $form_state, array $context): void {
  /** @var \Drupal\Core\Field\FieldItemListInterface $items */
  $items = $context['items'];
  $mapping = _schemadotorg_flexfield_get_mapping($items);
  if (!$mapping) {
    return;
  }

  $field_name = $items->getFieldDefinition()->getName();
  $schema_property = $mapping->getSchemaPropertyMapping($field_name);

  // Check to see if the property has flex field settings.
  $config = \Drupal::config('schemadotorg_flexfield.settings');
  if (!$config->get('default_properties.' . $schema_property)) {
    return;
  }

  /** @var \Drupal\schemadotorg\SchemaDotOrgNamesInterface $schema_names */
  $schema_names = Drupal::service('schemadotorg.names');
  /** @var \Drupal\schemadotorg\SchemaDotOrgSchemaTypeManagerInterface $schema_type_manager */
  $schema_type_manager = \Drupal::service('schemadotorg.schema_type_manager');

  $children = Element::children($element);
  foreach ($children as $child_key) {
    $property = $schema_names->snakeCaseToCamelCase($child_key);
    $unit = $schema_type_manager->getPropertyUnit($property);
    if ($unit) {
      $element[$child_key]['#field_suffix'] = $unit;
    }
  }
}

/**
 * Preprocess variables for flexfield.html.twig.
 */
function schemadotorg_flexfield_preprocess_flexfield(array &$variables): void {
  /** @var \Drupal\schemadotorg\SchemaDotOrgNamesInterface $schema_names */
  $schema_names = Drupal::service('schemadotorg.names');
  /** @var \Drupal\schemadotorg\SchemaDotOrgSchemaTypeManagerInterface $schema_type_manager */
  $schema_type_manager = \Drupal::service('schemadotorg.schema_type_manager');

  foreach ($variables['items'] as $index => &$item) {
    if ($item['value'] === '') {
      unset($variables['items'][$index]);
      continue;
    }

    // Append property unit to numeric value.
    $property = $schema_names->snakeCaseToCamelCase($item['name']);
    $unit = $schema_type_manager->getPropertyUnit($property, $item['value']);
    if ($unit) {
      $item['value'] .= ' ' . $unit;
    }
  }
}

/* ************************************************************************** */
// Internal functions.
/* ************************************************************************** */

/**
 * Get a flex field's Schema.org default properties.
 *
 * @param string $schema_type
 *   The Schema.org type.
 * @param string $schema_property
 *   The Schema.org property.
 *
 * @return array|null
 *   A flex field's Schema.org default properties.
 *
 * @internal
 */
function _schemadotorg_flexfield_get_default_properties(string $schema_type, string $schema_property): ?array {
  $config = \Drupal::config('schemadotorg_flexfield.settings');
  return $config->get("default_properties.$schema_type--$schema_property")
    ?? $config->get("default_properties.$schema_property")
    ?? NULL;
}

/**
 * Get a flex field's Schema.org mapping.
 *
 * @param \Drupal\Core\Field\FieldItemListInterface|\Drupal\Core\Field\FieldItemInterface $item
 *   A flex field item or flex field items.
 *
 * @return \Drupal\schemadotorg\SchemaDotOrgMappingInterface|null
 *   A Schema.org mapping.
 *
 * @internal
 */
function _schemadotorg_flexfield_get_mapping(FieldItemListInterface|FieldItemInterface $item): ?SchemaDotOrgMappingInterface {
  $field_type = $item->getFieldDefinition()->getType();
  // Make sure the field type is set to 'flex' (field).
  if ($field_type !== 'flex') {
    return NULL;
  }

  return SchemaDotOrgMapping::loadByEntity($item->getEntity());
}
