<?php

/**
 * @file
 * Allows Inline Entity Forms to be used to create Schema.org relationships.
 */

declare(strict_types = 1);

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\field\Entity\FieldConfig;
use Drupal\schemadotorg\Element\SchemaDotOrgSettings;
use Drupal\schemadotorg\SchemaDotOrgMappingInterface;

/**
 * Implements hook_help().
 */
function schemadotorg_focal_point_help(string $route_name, RouteMatchInterface $route_match): string|array|null {
  /** @var \Drupal\schemadotorg\SchemaDotOrgHelpManagerInterface $help_manager */
  $help_manager = \Drupal::service('schemadotorg.help_manager');
  return $help_manager->buildHelpPage($route_name, $route_match);
}

/**
 * Implements hook_schemadotorg_mapping_insert().
 *
 * Ensure that existing entity image fields use focal point.
 * (i.e. media:image and node:article)
 */
function schemadotorg_focal_point_schemadotorg_mapping_insert(SchemaDotOrgMappingInterface $mapping): void {
  /** @var \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager */
  $entity_field_manager = \Drupal::service('entity_field.manager');
  /** @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository */
  $entity_display_repository = \Drupal::service('entity_display.repository');

  $entity_type_id = $mapping->getTargetEntityTypeId();
  $bundle = $mapping->getTargetBundle();

  $field_definitions = array_intersect_key(
    $entity_field_manager->getFieldDefinitions($entity_type_id, $bundle),
    $mapping->getSchemaProperties()
  );
  foreach ($field_definitions as $field_name => $field_definition) {
    if ($field_definition->getType() !== 'image'
      || !$field_definition instanceof FieldConfig) {
      continue;
    }

    $form_display = $entity_display_repository->getFormDisplay($entity_type_id, $bundle);
    $component = $form_display->getComponent($field_name);
    if ($component['type'] !== 'image_focal_point') {
      $component['type'] = 'image_focal_point';
      $component['settings'] = [
        'progress_indicator' => 'throbber',
        'preview_image_style' => 'medium',
        'preview_link' => TRUE,
        'offsets' => '50,50',
      ];
      $form_display
        ->setComponent($field_name, $component)
        ->save();
    }
  }
}

/**
 * Implements hook_schemadotorg_property_field_alter().
 */
function schemadotorg_focal_point_schemadotorg_property_field_alter(
  string $schema_type,
  string $schema_property,
  array &$field_storage_values,
  array &$field_values,
  ?string &$widget_id,
  array &$widget_settings,
  ?string &$formatter_id,
  array &$formatter_settings
): void {
  // Set an image field's default form widget settings to use focal point.
  if ($field_storage_values['type'] === 'image') {
    $widget_id = 'image_focal_point';
    $widget_settings = [
      'progress_indicator' => 'throbber',
      'preview_image_style' => 'medium',
      'preview_link' => TRUE,
      'offsets' => '50,50',
    ];
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function schemadotorg_focal_point_form_schemadotorg_properties_settings_form_alter(array &$form, FormStateInterface $form_state): void {
  $config = \Drupal::configFactory()->getEditable('schemadotorg_focal_point.settings');

  $form['schemadotorg_focal_point'] = [
    '#type' => 'details',
    '#title' => t('Focal point settings'),
    '#open' => TRUE,
    '#tree' => TRUE,
  ];
  $form['schemadotorg_focal_point']['image_styles'] = [
    '#type' => 'schemadotorg_settings',
    '#settings_type' => SchemaDotOrgSettings::ASSOCIATIVE_GROUPED_NAMED,
    '#settings_format' => 'name|Image style label|width:1000,height:1000',
    '#array_name' => 'data',
    '#title' => t('Image styles'),
    '#description' => t('Enter focal point images styles for decoupled front-ends.'),
    '#default_value' => $config->get('image_styles'),
  ];

  // Add validation callback.
  $form['#validate'][] = 'schemadotorg_focal_point_settings_form_validate';

  // Add submit callback.
  $form['#submit'][] = 'schemadotorg_focal_point_settings_form_submit';
}

/**
 * Form submission validation for schemadotorg_properties_settings_form.
 *
 * @see schemadotorg_focal_point_form_schemadotorg_properties_settings_form_alter()
 */
function schemadotorg_focal_point_settings_form_validate(array &$form, FormStateInterface $form_state): void {
  $values = $form_state->getValue('schemadotorg_focal_point');
  $element = $form['schemadotorg_focal_point']['image_styles'];
  foreach ($values['image_styles'] as $name => $settings) {
    $t_args = ['%label' => $name];

    // Validate that width and height are set.
    if (!isset($settings['data']['width']) || !isset($settings['data']['height'])) {
      $form_state->setError($element, t('A width and height is required for the %label image style.', $t_args));
    }
    // Validate that width and height are integers.
    elseif (!is_numeric($settings['data']['width']) || !is_numeric($settings['data']['height'])) {
      $form_state->setError($element, t('The width and height must be numbers for the %label image style.', $t_args));
    }
  }
}

/**
 * Form submission handler for schemadotorg_properties_settings_form.
 *
 * @see schemadotorg_focal_point_form_schemadotorg_properties_settings_form_alter()
 */
function schemadotorg_focal_point_settings_form_submit(array &$form, FormStateInterface $form_state): void {
  /** @var \Drupal\schemadotorg_focal_point\SchemaDotOrgFocalPointManagerInterface $focal_point_manager */
  $focal_point_manager = \Drupal::service('schemadotorg_focal_point.manager');

  $image_styles = $form_state->getValue(['schemadotorg_focal_point', 'image_styles']);
  $focal_point_manager->resetImageStyles($image_styles);
}
