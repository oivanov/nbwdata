<?php

/**
 * @file
 * Allows Inline Entity Forms to be used to create Schema.org relationships.
 */

declare(strict_types = 1);

use Drupal\Core\Entity\Entity\EntityFormMode;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\node\NodeTypeInterface;
use Drupal\schemadotorg\Element\SchemaDotOrgSettings;

/**
 * Implements hook_help().
 */
function schemadotorg_inline_entity_form_help(string $route_name, RouteMatchInterface $route_match): string|array|null {
  /** @var \Drupal\schemadotorg\SchemaDotOrgHelpManagerInterface $help_manager */
  $help_manager = \Drupal::service('schemadotorg.help_manager');
  return $help_manager->buildHelpPage($route_name, $route_match);
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 *
 * Adds 'inline entity form' form display to specific Schema.org node
 * type mappings.
 */
function schemadotorg_inline_entity_form_node_type_insert(NodeTypeInterface $node_type): void {
  // Make sure we are insert node type that is mapped to a Schema.org type.
  // @see \Drupal\schemadotorg\SchemaDotOrgEntityTypeBuilder::addEntityBundle
  if (empty($node_type->schemaDotOrgType)) {
    return;
  }

  // Check Schema.org type is subtype of the inline entity form displays
  // enabled by default.
  /** @var \Drupal\schemadotorg\SchemaDotOrgSchemaTypeManagerInterface $schema_type_manager */
  $schema_type_manager = \Drupal::service('schemadotorg.schema_type_manager');
  $default_form_displays = \Drupal::configFactory()
    ->get('schemadotorg_inline_entity_form.settings')
    ->get('default_form_displays');
  if (!$schema_type_manager->isSubTypeOf($node_type->schemaDotOrgType, $default_form_displays)) {
    return;
  }

  // Create the inline entity form mode if it does not exist.
  if (!EntityFormMode::load('node.inline_entity_form')) {
    EntityFormMode::create([
      'id' => 'node.inline_entity_form',
      'label' => 'Inline entity form',
      'targetEntityType' => 'node',
    ])->save();
  }

  // Create the inline entity form display.
  /** @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository */
  $entity_display_repository = \Drupal::service('entity_display.repository');
  $form_display = $entity_display_repository->getFormDisplay('node', $node_type->id(), 'inline_entity_form');

  // Hide most default base field components.
  // @see \Drupal\node\Entity\Node::baseFieldDefinitions
  $components = $form_display->getComponents();
  $component_keys = array_keys($components);
  $default_components = \Drupal::configFactory()
    ->get('schemadotorg_inline_entity_form.settings')
    ->get('default_form_display_components');
  $remove_keys = array_diff_key(
    array_combine($component_keys, $component_keys),
    array_combine($default_components, $default_components)
  );
  foreach ($remove_keys as $remove_key) {
    $form_display->removeComponent($remove_key);
  }

  $form_display->save();
}

/**
 * Implements hook_schemadotorg_property_field_alter().
 */
function schemadotorg_inline_entity_form_schemadotorg_property_field_alter(
  string $schema_type,
  string $schema_property,
  array &$field_storage_values,
  array &$field_values,
  ?string &$widget_id,
  array &$widget_settings,
  ?string &$formatter_id,
  array &$formatter_settings
): void {
  if ($field_storage_values['type'] !== 'entity_reference'
    || !_schemadotorg_inline_entity_form_enabled($schema_type, $schema_property)) {
    return;
  }

  $widget_id = 'inline_entity_form_complex';
  $widget_settings = [
    'allow_existing' => TRUE,
    'allow_duplicate' => TRUE,
    'collapsible' => TRUE,
    'revision' => TRUE,
  ];

  // If the 'inline entity form' form mode exists, use it.
  if (EntityFormMode::load('node.inline_entity_form')) {
    $widget_settings['form_mode'] = 'inline_entity_form';
  }

  // If the 'content browser' module is installed, use it.
  if (\Drupal::moduleHandler()->moduleExists('content_browser')) {
    $widget_settings['third_party_settings'] = [
      'entity_browser_entity_form' => [
        'entity_browser_id' => 'browse_content',
      ],
    ];
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function schemadotorg_inline_entity_form_form_schemadotorg_properties_settings_form_alter(array &$form, FormStateInterface $form_state): void {
  $config = \Drupal::configFactory()->getEditable('schemadotorg_inline_entity_form.settings');

  $form['schemadotorg_inline_entity_form'] = [
    '#type' => 'details',
    '#title' => t('Inline entity form settings'),
    '#open' => TRUE,
    '#tree' => TRUE,
  ];
  $form['schemadotorg_inline_entity_form']['default_properties'] = [
    '#type' => 'schemadotorg_settings',
    '#settings_type' => SchemaDotOrgSettings::INDEXED,
    '#settings_format' => 'propertyName or SchemaType--propertyName',
    '#title' => t('Default inline entity form properties'),
    '#description' => t('Enter Schema.org properties that should use the inline entity form.'),
    '#description_link' => 'properties',
    '#default_value' => $config->get('default_properties'),
  ];
  $form['schemadotorg_inline_entity_form']['default_form_displays'] = [
    '#type' => 'schemadotorg_settings',
    '#settings_type' => SchemaDotOrgSettings::INDEXED,
    '#settings_format' => 'SchemaType',
    '#title' => t('Default Schema.org type form displays'),
    '#description' => t('Enter Schema.org type that should have the inline entity form display enabled by default.'),
    '#description_link' => 'types',
    '#default_value' => $config->get('default_form_displays'),
  ];
  $form['schemadotorg_inline_entity_form']['default_form_display_components'] = [
    '#type' => 'schemadotorg_settings',
    '#settings_type' => SchemaDotOrgSettings::INDEXED,
    '#settings_format' => 'field_name or propertyName',
    '#title' => t('Default form display components'),
    '#description' => t('Enter component field and property names that should be included in the default inline entity form display.'),
    '#default_value' => $config->get('default_form_display_components'),
  ];

  // Add submit callback.
  $form['#submit'][] = 'schemadotorg_inline_entity_form_settings_form_submit';
}

/**
 * Form submission handler for schemadotorg_properties_settings_form.
 *
 * @see schemadotorg_inline_entity_form_form_schemadotorg_properties_settings_form_alter()
 */
function schemadotorg_inline_entity_form_settings_form_submit(array &$form, FormStateInterface $form_state): void {
  $config = \Drupal::configFactory()->getEditable('schemadotorg_inline_entity_form.settings');
  $values = $form_state->getValue('schemadotorg_inline_entity_form');
  foreach ($values as $key => $value) {
    $config->set($key, $value);
  }
  $config->save();
}

/**
 * Determine if the inline entity form should be used for Schema.org property.
 *
 * @param string $schema_type
 *   The Schema.org type.
 * @param string $schema_property
 *   The Schema.org property.
 *
 * @return bool
 *   TRUE if the inline entity form should be used for Schema.org property.
 */
function _schemadotorg_inline_entity_form_enabled(string $schema_type, string $schema_property): bool {
  $default_properties = \Drupal::config('schemadotorg_inline_entity_form.settings')
    ->get('default_properties');

  // Check the property.
  if (in_array($schema_property, $default_properties)) {
    return TRUE;
  }

  // Check for the {type}--{property} in the type's breadcrumbs.
  /** @var \Drupal\schemadotorg\SchemaDotOrgSchemaTypeManagerInterface $schema_type_manager */
  $schema_type_manager = \Drupal::service('schemadotorg.schema_type_manager');
  $breadcrumbs = $schema_type_manager->getTypeBreadcrumbs($schema_type);
  foreach ($breadcrumbs as $breadcrumb) {
    $breadcrumb = array_reverse($breadcrumb);
    foreach ($breadcrumb as $breadcrumb_type) {
      if (in_array("$breadcrumb_type--$schema_property", $default_properties)) {
        return TRUE;
      }
    }
  }
  return FALSE;
}
