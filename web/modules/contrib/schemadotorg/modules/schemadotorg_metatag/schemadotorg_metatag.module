<?php

/**
 * @file
 * Automatically adds a metatag field to Schema.org types.
 */

declare(strict_types = 1);

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\schemadotorg\Element\SchemaDotOrgSettings;
use Drupal\schemadotorg\Entity\SchemaDotOrgMapping;
use Drupal\schemadotorg\SchemaDotOrgMappingInterface;

/**
 * Implements hook_help().
 */
function schemadotorg_metatag_help(string $route_name, RouteMatchInterface $route_match): string|array|null {
  /** @var \Drupal\schemadotorg\SchemaDotOrgHelpManagerInterface $help_manager */
  $help_manager = \Drupal::service('schemadotorg.help_manager');
  return $help_manager->buildHelpPage($route_name, $route_match);
}

/**
 * Implements hook_schemadotorg_mapping_insert().
 */
function schemadotorg_metatag_schemadotorg_mapping_insert(SchemaDotOrgMappingInterface $mapping): void {
  $entity_type_id = $mapping->getTargetEntityTypeId();
  $bundle = $mapping->getTargetBundle();
  $field_name = 'field_metatag';

  // Only add the meta tags field to node types.
  if ($entity_type_id !== 'node') {
    return;
  }

  // Create meta tag field storage.
  if (!FieldStorageConfig::loadByName($entity_type_id, $field_name)) {
    FieldStorageConfig::create([
      'field_name' => $field_name,
      'entity_type' => $entity_type_id,
      'type' => 'metatag',
    ])->save();
  }

  // Create meta tag field instance.
  if (!FieldConfig::loadByName($entity_type_id, $bundle, $field_name)) {
    FieldConfig::create([
      'label' => t('Meta tags'),
      'field_name' => $field_name,
      'entity_type' => $entity_type_id,
      'bundle' => $bundle,
      'type' => 'metatag',
    ])->save();
  }

  // Set meta tag component in the default form display.
  /** @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository */
  $entity_display_repository = \Drupal::service('entity_display.repository');
  $form_display = $entity_display_repository->getFormDisplay($entity_type_id, $bundle, 'default');
  $form_display->setComponent($field_name, [
    'type' => 'metatag_firehose',
    'settings' => [
      'sidebar' => TRUE,
      'use_details' => TRUE,
    ],
    'weight' => 99,
  ]);
  $form_display->save();

  // Set metatag default groups for the content type.
  $default_groups = \Drupal::config('schemadotorg_metatag.settings')
    ->get('default_groups');
  if ($default_groups) {
    \Drupal::configFactory()->getEditable('metatag.settings')
      ->set("entity_type_groups.node.$bundle", array_combine($default_groups, $default_groups))
      ->save();
  }
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function schemadotorg_metatag_field_widget_metatag_firehose_form_alter(array &$element, FormStateInterface $form_state, array $context): void {
  // @see https://www.drupal.org/project/metatag/issues/3108108
  /** @var \Drupal\metatag\Plugin\Field\FieldType\MetatagFieldItemList $items */
  $items = $context['items'];
  $entity = $items->getEntity();
  if (!SchemaDotOrgMapping::loadByEntity($entity)) {
    return;
  }

  // Move meta tag markup elements in the meta tag detail description.
  $active_theme_name = \Drupal::service('theme.manager')->getActiveTheme()->getName();
  if ($active_theme_name === 'gin') {
    $description_keys = [
      'preamble' => 'preamble',
      'intro_text' => 'intro_text',
      'tokens' => 'tokens',
    ];
    $element['#description'] = array_intersect_key($element, $description_keys);
    $element = array_diff_key($element, $description_keys);
  }

  $config = \Drupal::config('schemadotorg_metatag.settings');
  $allowed_metatags = $config->get('allowed_metatags');
  $allowed_robots = $config->get('allowed_robots');
  _schemadotorg_metatag_field_widget_metatag_firehose_form_alter_recursive($element, $allowed_metatags, $allowed_robots);
}

/**
 * Recurse through the metatag widget and only display allowed metatags.
 */
function _schemadotorg_metatag_field_widget_metatag_firehose_form_alter_recursive(array &$elements, array $allowed_metatags, array $allowed_robots): void {
  foreach (Element::children($elements) as $key) {
    $element =& $elements[$key];
    $type = $element['#type'] ?? '';

    if (!in_array($key, $allowed_metatags)
      && $type !== 'details') {
      $element['#access'] = FALSE;
    }
    elseif ($key === 'robots') {
      if ($allowed_robots) {
        $allowed_robots = array_combine($allowed_robots, $allowed_robots);
        $element['#options'] = array_intersect_key($element['#options'], $allowed_robots);
        foreach (Element::children($element) as $robots_key) {
          unset($element[$robots_key]);
        }
      }
    }
    else {
      if ($type === 'details'
        && \Drupal::config('schemadotorg_metatag.settings')->get('hide_groups_details')) {
        $element['#type'] = 'container';
      }
      _schemadotorg_metatag_field_widget_metatag_firehose_form_alter_recursive($element, $allowed_metatags, $allowed_robots);
    }
  }
}

/* ************************************************************************** */
// Schema.org types settings form.
/* ************************************************************************** */

/**
 * Implements hook_form_FORM_ID_alter().
 */
function schemadotorg_metatag_form_schemadotorg_types_settings_form_alter(array &$form, FormStateInterface $form_state): void {
  $config = \Drupal::configFactory()->getEditable('schemadotorg_metatag.settings');

  $t_args = [':href' => Url::fromRoute('metatag.reports_plugins')->toString()];

  /** @var \Drupal\metatag\MetatagManagerInterface $metatag_manager */
  $metatag_manager = \Drupal::service('metatag.manager');
  $metatag_groups = $metatag_manager->sortedGroups();
  $metatag_group_options = [];
  foreach ($metatag_groups as $group_name => $group_info) {
    $metatag_group_options[$group_name] = $group_info['label'];
  }

  $form['schemadotorg_metatag'] = [
    '#type' => 'details',
    '#title' => t('Metatag settings'),
    '#open' => TRUE,
    '#tree' => TRUE,
  ];
  $form['schemadotorg_metatag']['default_groups'] = [
    '#type' => 'checkboxes',
    '#title' => t('Default metatag groups'),
    '#description' => t('Identify which metatag groups should be available on which entity type / bundle combination. Unselected groups will not appear on the configuration form for that entity type, reducing the size of the form and increasing performance. If no groups are selected for a type, all groups will appear.'),
    '#default_value' => $config->get('default_groups'),
    '#options' => $metatag_group_options,
    '#element_validate' => [['\Drupal\schemadotorg\Utility\SchemaDotOrgElementHelper', 'validateMultipleOptions']],
  ];
  $form['schemadotorg_metatag']['hide_groups_details'] = [
    '#type' => 'checkbox',
    '#title' => t('Hide metatag group details wrapper'),
    '#description' => t('If checked, metatag grouping will not be displayed.'),
    '#default_value' => $config->get('hide_groups_details'),
    '#return_value' => TRUE,
  ];
  $form['schemadotorg_metatag']['allowed_metatags'] = [
    '#type' => 'schemadotorg_settings',
    '#settings_type' => SchemaDotOrgSettings::INDEXED,
    '#settings_format' => 'metatag',
    '#title' => t('Allowed meta tags'),
    '#description' => t('Enter allowed <a href=":href">meta tags by name</a> to be displayed on node edit forms. Leave blank to allow all meta tags to be display.', $t_args),
    '#default_value' => $config->get('allowed_metatags'),
  ];
  $form['schemadotorg_metatag']['allowed_robots'] = [
    '#type' => 'checkboxes',
    '#title' => t('Allowed robots directives'),
    '#description' => t('Check robots directives to be displayed on node edit forms. Leave unchecked to display all robots directives.'),
    '#options' => [
      'index' => t('index - Allow search engines to index this page (assumed).'),
      'follow' => t('follow - Allow search engines to follow links on this page (assumed).'),
      'noindex' => t('noindex - Prevents search engines from indexing this page.'),
      'nofollow' => t('nofollow - Prevents search engines from following links on this page.'),
      'noarchive' => t('noarchive - Prevents cached copies of this page from appearing in search results.'),
      'nosnippet' => t('nosnippet - Prevents descriptions from appearing in search results, and prevents page caching.'),
      'noodp' => t('noodp - Blocks the <a href=":opendirectory">Open Directory Project</a> description from appearing in search results.', [':opendirectory' => 'http://www.dmoz.org/']),
      'noydir' => t('noydir - Prevents Yahoo! from listing this page in the <a href=":ydir">Yahoo! Directory</a>.', [':ydir' => 'http://dir.yahoo.com/']),
      'noimageindex' => t('noimageindex - Prevent search engines from indexing images on this page.'),
      'notranslate' => t('notranslate - Prevent search engines from offering to translate this page in search results.'),
    ],
    '#default_value' => $config->get('allowed_robots'),
    '#element_validate' => [['\Drupal\schemadotorg\Utility\SchemaDotOrgElementHelper', 'validateMultipleOptions']],
  ];

  // Add submit callback.
  $form['#submit'][] = 'schemadotorg_metatag_settings_form_submit';
}

/**
 * Form submission handler for schemadotorg_properties_settings_form.
 *
 * @see schemadotorg_metatag_form_schemadotorg_properties_settings_form_alter()
 */
function schemadotorg_metatag_settings_form_submit(array &$form, FormStateInterface $form_state): void {
  $config = \Drupal::configFactory()->getEditable('schemadotorg_metatag.settings');
  $values = $form_state->getValue('schemadotorg_metatag');
  foreach ($values as $key => $value) {
    $config->set($key, $value);
  }
  $config->save();
}
