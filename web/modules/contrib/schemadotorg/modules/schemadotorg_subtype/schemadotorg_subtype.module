<?php

/**
 * @file
 * Subtypes allow more specificity without having to create dedicated entity types.
 */

declare(strict_types = 1);

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Field\FieldFilteredMarkup;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\schemadotorg\Element\SchemaDotOrgSettings;
use Drupal\schemadotorg\SchemaDotOrgEntityFieldManagerInterface;
use Drupal\schemadotorg\Utility\SchemaDotOrgElementHelper;

/**
 * Implements hook_help().
 */
function schemadotorg_subtype_help(string $route_name, RouteMatchInterface $route_match): string|array|null {
  if ($route_name === 'schemadotorg_subtype.settings') {
    return '<p>' . t('The <em>Schema.org subtype settings</em> page allows administrators to configure default setting for subtyping.') . '<p>';
  }

  /** @var \Drupal\schemadotorg\SchemaDotOrgHelpManagerInterface $help_manager */
  $help_manager = \Drupal::service('schemadotorg.help_manager');
  return $help_manager->buildHelpPage($route_name, $route_match);
}

/* ************************************************************************** */
// Schema.org mapping defaults.
/* ************************************************************************** */

/**
 * Implements hook_schemadotorg_mapping_defaults_alter().
 */
function schemadotorg_subtype_schemadotorg_mapping_defaults_alter(array &$defaults, string $entity_type_id, ?string $bundle, string $schema_type): void {
  /** @var \Drupal\schemadotorg\SchemaDotOrgSchemaTypeManagerInterface $schema_type_manager */
  $schema_type_manager = \Drupal::service('schemadotorg.schema_type_manager');
  $allowed_values = $schema_type_manager->getAllTypeChildrenAsOptions($schema_type);
  if (empty($allowed_values)) {
    return;
  }

  /** @var \Drupal\schemadotorg\SchemaDotOrgNamesInterface $schema_names */
  $schema_names = \Drupal::service('schemadotorg.names');

  $config = \Drupal::configFactory()->get('schemadotorg_subtype.settings');

  // Set default properties.
  $default_properties = [
    'type' => 'list_string',
    'label' => $config->get('default_field_label'),
    'description' => $config->get('default_field_description'),
  ];

  // Set machine name with subtype suffix.
  $machine_name_suffix = $config->get('default_field_suffix');
  $machine_name_max_length = $schema_names->getNameMaxLength('properties') - strlen($machine_name_suffix);
  $options = [
    'maxlength' => $machine_name_max_length,
    'truncate' => TRUE,
  ];
  $machine_name = $bundle ?: $schema_names->camelCaseToDrupalName($schema_type, $options);
  $machine_name .= $machine_name_suffix;
  $default_properties['machine_name'] = $machine_name;

  // Set allowed values.
  $default_subtypes = $config->get('default_subtypes');
  $allowed_values = $config->get("default_allowed_values.$schema_type") ?: $allowed_values;
  $default_properties['allowed_values'] = $allowed_values;

  // Handle existing subtype property mapping.
  /** @var \Drupal\schemadotorg\SchemaDotOrgMappingInterface $mapping */
  $mapping = \Drupal::entityTypeManager()
    ->getStorage('schemadotorg_mapping')
    ->load("$entity_type_id.$bundle");
  if ($mapping && $mapping->hasSchemaPropertyMapping('subtype')) {
    $property_field_name = $mapping->getSchemaPropertyFieldName('subtype');
    $defaults['properties']['subtype'] = ['name' => $property_field_name]
      + $default_properties;
    return;
  }

  // If the expected subtype field name exists use it.
  // This will only occur when a mapping with subtype is deleted and recreated.
  $subtype_field_name = $schema_names->getFieldPrefix() . $machine_name;
  if (FieldStorageConfig::loadByName($entity_type_id, $subtype_field_name)) {
    $defaults['properties']['subtype'] = ['name' => $subtype_field_name]
      + $default_properties;
    return;
  }

  // Get the field name which can either be _add_ or empty.
  // This value is displayed via a checkbox.
  $name = (!$mapping && in_array($schema_type, $default_subtypes))
    ? SchemaDotOrgEntityFieldManagerInterface::ADD_FIELD
    : '';

  // Sets the Schema.org mapping defaults for creating a subtype property.
  $defaults['properties']['subtype'] = ['name' => $name]
    + $default_properties;
}

/**
 * Alter the Schema.org JSON-LD data for an entity.
 *
 * Besides, altering an existing Schema.org mapping's JSON-LD data, modules can
 * define custom JSON-LD data for any entity type.
 *
 * @param array $data
 *   The Schema.org JSON-LD data for an entity.
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The entity.
 */
function schemadotorg_subtype_schemadotorg_jsonld_schema_type_entity_alter(array &$data, EntityInterface $entity): void {
  // Allow subtype property to override the mapping Schema.org type.
  if (!empty($data['subtype'])) {
    $data['@type'] = $data['subtype'];
    unset($data['subtype']);
  }
}

/* ************************************************************************** */
// Schema.org mapping UI form alter.
/* ************************************************************************** */

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function schemadotorg_subtype_form_schemadotorg_mapping_form_alter(array &$form, FormStateInterface &$form_state): void {
  if (!\Drupal::moduleHandler()->moduleExists('schemadotorg_ui')) {
    return;
  }

  /** @var \Drupal\schemadotorg\Form\SchemaDotOrgMappingForm $form_object */
  $form_object = $form_state->getFormObject();
  /** @var \Drupal\schemadotorg\SchemaDotOrgMappingInterface $mapping */
  $mapping = $form_object->getEntity();

  // Exit if no Schema.org type has been selected.
  if (!$mapping->getSchemaType()) {
    return;
  }

  // Set subtype defaults from mapping defaults in $form_state.
  // @see \Drupal\schemadotorg_ui\Form\SchemaDotOrgUiMappingForm::buildFieldTypeForm
  $mapping_defaults = $form_state->get('mapping_defaults');
  $subtype_defaults = $mapping_defaults['properties']['subtype'] ?? NULL;

  // Make sure the current Schema.org type supports subtypeing.
  if (empty($subtype_defaults)) {
    return;
  }

  // Store reference to ADD_FIELD.
  $add_field = SchemaDotOrgEntityFieldManagerInterface::ADD_FIELD;

  // Determine if Schema.org type already has subtyping enabled and
  // display subtyping information.
  if ($subtype_defaults['name'] && $subtype_defaults['name'] !== $add_field) {
    $form['mapping']['subtype'] = [
      '#type' => 'item',
      '#title' => t('Schema.org subtyping'),
      '#markup' => t('Enabled'),
      '#input' => FALSE,
      '#weight' => -5,
    ];
    $form['mapping']['subtype']['name'] = [
      '#type' => 'value',
      '#parents' => ['mapping', 'properties', 'subtype', 'field', 'name'],
      '#default_value' => $subtype_defaults['name'],
    ];
    return;
  }

  /** @var \Drupal\schemadotorg\SchemaDotOrgNamesInterface $schema_names */
  $schema_names = \Drupal::service('schemadotorg.names');
  $machine_name_max_length = $schema_names->getNameMaxLength('properties');

  // Add create and map a subtype field to a custom Schema.org property form.
  //
  // The subtype element name correspond the Schema.org Blueprints UI mapping
  // form's properties.
  // @see \Drupal\schemadotorg_ui\Form\SchemaDotOrgUiMappingForm::buildSchemaPropertyFieldForm
  $form['mapping']['subtype'] = [
    '#type' => 'details',
    '#title' => t('Schema.org subtyping'),
    '#open' => ($mapping->isNew() && $subtype_defaults['name']),
    '#weight' => -5,
  ];
  $form['mapping']['subtype']['name'] = [
    '#type' => 'checkbox',
    '#title' => t('Enable Schema.org subtyping'),
    '#description' => t("If checked, a 'Type' field is added to the entity which allows content authors to specify a more specific (sub)type for the entity."),
    '#return_value' => $add_field,
    '#parents' => ['mapping', 'properties', 'subtype', 'field', 'name'],
    '#default_value' => $subtype_defaults['name'],
  ];
  $form['mapping']['subtype'][$add_field] = [
    '#type' => 'details',
    '#title' => t('Add field'),
    '#attributes' => ['data-schemadotorg-ui-summary' => t('List (text)')],
    '#states' => [
      'visible' => [
        ':input[name="mapping[properties][subtype][field][name]"]' => ['checked' => TRUE],
      ],
    ],
  ];
  $form['mapping']['subtype'][$add_field]['type'] = [
    '#type' => 'item',
    '#title' => t('Type'),
    '#markup' => t('List (text)'),
    '#value' => $subtype_defaults['type'],
  ];
  $form['mapping']['subtype'][$add_field]['label'] = [
    '#type' => 'textfield',
    '#title' => t('Label'),
    '#required' => TRUE,
    '#default_value' => $subtype_defaults['label'],
  ];
  $form['mapping']['subtype'][$add_field]['machine_name'] = [
    '#type' => 'textfield',
    '#title' => t('Machine-readable name'),
    '#field_prefix' => $schema_names->getFieldPrefix(),
    '#maxlength' => $machine_name_max_length,
    '#required' => TRUE,
    '#default_value' => $subtype_defaults['machine_name'],
  ];
  $form['mapping']['subtype'][$add_field]['description'] = [
    '#type' => 'textarea',
    '#title' => t('Description'),
    '#description' => t('Instructions to present to the user below this field on the editing form.'),
    '#default_value' => $subtype_defaults['description'],
  ];
  $form['mapping']['subtype'][$add_field]['allowed_values'] = [
    '#type' => 'schemadotorg_settings',
    '#settings_type' => SchemaDotOrgSettings::ASSOCIATIVE,
    '#settings_description' => FALSE,
    '#title' => t('Allowed values'),
    '#description' => '<p>'
    . t('The possible values this field can contain. Enter one value per line, in the format key|label.') . '<br/>'
    . t('The key is the stored value. The label will be used in displayed values and edit forms.') . '<br/>'
    . t('The label is optional: if a line contains a single string, it will be used as key and label.')
    . '</p>'
    . '<p>' . t('Allowed HTML tags in labels: @tags', ['@tags' => FieldFilteredMarkup::displayAllowedTags()]) . '</p>',
    '#required' => TRUE,
    '#default_value' => $subtype_defaults['allowed_values'],
  ];

  SchemaDotOrgElementHelper::setElementParents(
    $form['mapping']['subtype'][$add_field],
    ['mapping', 'properties', 'subtype', 'field', $add_field]
  );
}
