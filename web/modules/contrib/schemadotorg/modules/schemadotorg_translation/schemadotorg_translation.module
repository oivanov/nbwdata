<?php

/**
 * @file
 * Manages translations for Schema.org types and properties as they are created.
 */

declare(strict_types = 1);

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\field\FieldConfigInterface;
use Drupal\schemadotorg\SchemaDotOrgMappingInterface;

/**
 * Implements hook_help().
 */
function schemadotorg_translation_help(string $route_name, RouteMatchInterface $route_match): string|array|null {
  if ($route_name === 'schemadotorg_translation.settings') {
    return '<p>' . t('The <em>Schema.org translations settings</em> page allows administrators to configure which field names and types are excluded or included for allowing translations.') . '<p>';
  }

  /** @var \Drupal\schemadotorg\SchemaDotOrgHelpManagerInterface $help_manager */
  $help_manager = \Drupal::service('schemadotorg.help_manager');
  return $help_manager->buildHelpPage($route_name, $route_match);
}

/**
 * Implements hook_schemadotorg_mapping_insert().
 */
function schemadotorg_translation_schemadotorg_mapping_insert(SchemaDotOrgMappingInterface $mapping): void {
  /** @var \Drupal\schemadotorg_translation\SchemaDotOrgTranslationManagerInterface $manager */
  $manager = \Drupal::service('schemadotorg_translation.manager');
  $manager->enableMapping($mapping);
}

/**
 * Implements hook_field_config_insert().
 */
function schemadotorg_translation_field_config_insert(FieldConfigInterface $field_config): void {
  /** @var \Drupal\schemadotorg_translation\SchemaDotOrgTranslationManagerInterface $manager */
  $manager = \Drupal::service('schemadotorg_translation.manager');
  $manager->enableMappingField($field_config);
}
