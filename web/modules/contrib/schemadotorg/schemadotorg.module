<?php

/**
 * @file
 * Primary module hooks for Schema.org module.
 */

declare(strict_types = 1);

use Drupal\Component\Serialization\Json;
use Drupal\Component\Utility\NestedArray;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\schemadotorg\Entity\SchemaDotOrgMapping;

// Load all MODULE.schemadotorg.inc files.
\Drupal::moduleHandler()->loadAllIncludes('schemadotorg.inc');

/**
 * Implements hook_help().
 */
function schemadotorg_help(string $route_name, RouteMatchInterface $route_match): string|array|null {
  switch ($route_name) {
    case 'entity.schemadotorg_mapping.collection':
      $build = [
        '#prefix' => '<p>',
        '#suffix' => '</p>',
      ];
      $build['description'] = [
        '#markup' => t('The <em>Schema.org mappings</em> page lists all available mappings from Drupal entity types to Schema.org types.'),
        '#suffix' => '<br/>',
      ];
      $build['learn_more'] = [
        '#type' => 'link',
        '#title' => t('Learn more about the Schema.org Blueprints module'),
        '#url' => Url::fromRoute('help.page', ['name' => 'schemadotorg']),
      ];
      $build['or'] = [
        '#prefix' => ' ',
        '#markup' => t('or'),
        '#suffix' => ' &nbsp;',
      ];
      $build['video'] = [
        '#type' => 'link',
        '#title' => t('â–º Watch videos'),
        '#url' => Url::fromRoute('schemadotorg.help.videos'),
        '#attributes' => [
          'class' => ['use-ajax', 'button', 'button--small', 'button--extrasmall'],
          'data-dialog-type' => 'modal',
          'data-dialog-options' => Json::encode([
            'width' => 800,
          ]),
        ],
      ];
      return $build;

    case 'entity.schemadotorg_mapping_type.collection':
      return '<p>' . t('The <em>Schema.org mapping types</em> page lists all available mapping types with default settings for available Drupal entity types.') . '</p>';

    case 'schemadotorg.settings.types':
      return '<p>' . t('The <em>Schema.org types settings</em> page allows administrators to configure the default settings for Schema.org types.') . '</p>';

    case 'schemadotorg.settings':
      return '<p>' . t('The <em>Schema.org settings</em> page allows administrators to configure the default settings for the Schema.org Blueprints module.') . '</p>';

    case 'schemadotorg.settings.properties':
      return '<p>' . t('The <em>Schema.org properties settings</em> page allows administrators to configure the default settings for Schema.org properties.') . '</p>';

    case 'schemadotorg.settings.names':
      return '<p>'
        . t("The <em>Schema.org names settings</em> page allows administrators to configure how Schema.org's naming conventions for types and properties are converted to Drupal's naming conventions.")
        . ' '
        . t('For example, Schema.org uses camel case (camelCase) and Drupal uses snake case (snake_case) and Drupal limits all entity ids and field names to 32 characters.')
        . '</p>';
  }

  /** @var \Drupal\schemadotorg\SchemaDotOrgHelpManagerInterface $help_manager */
  $help_manager = \Drupal::service('schemadotorg.help_manager');
  return $help_manager->buildHelpPage($route_name, $route_match);
}

/**
 * Implements hook_modules_installed().
 *
 * Create mapping types for modules that provide a content entities.
 */
function schemadotorg_modules_installed(array $modules): void {
  if (!\Drupal::isConfigSyncing()) {
    /** @var \Drupal\schemadotorg\SchemaDotOrgInstallerInterface $installer */
    $installer = \Drupal::service('schemadotorg.installer');
    $installer->installModules($modules);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Display a warning on the entity revision configuration page when the
 * expected Schema.org target bundles do not match the selected target bundles.
 */
function schemadotorg_form_field_config_edit_form_alter(array &$form, FormStateInterface $form_state): void {
  // Only display the warning via a GET form request.
  if (!\Drupal::request()->isMethod('get')) {
    return;
  }

  /** @var \Drupal\field_ui\Form\FieldConfigEditForm $form_object */
  $form_object = $form_state->getFormObject();
  /** @var \Drupal\field\FieldConfigInterface $field */
  $field = $form_object->getEntity();

  // Check the field type is an entity reference field.
  if (!in_array($field->getType(), ['entity_reference', 'entity_reference_revisions'])) {
    return;
  }

  // Get the field's related Schema.org mapping.
  /** @var \Drupal\schemadotorg\SchemaDotOrgMappingStorageInterface $mapping_storage */
  $mapping_storage = \Drupal::entityTypeManager()->getStorage('schemadotorg_mapping');
  $entity_type_id = $field->getTargetEntityTypeId();
  $bundle = $field->getTargetBundle();
  $mapping = $mapping_storage->load("$entity_type_id.$bundle");
  if (!$mapping) {
    return;
  }

  // Get the field's Schema.org property.
  $field_name = $field->getName();
  $schema_type = $mapping->getSchemaType();
  $schema_property = $mapping->getSchemaPropertyMapping($field_name);
  if (!$schema_property) {
    return;
  }

  // Skip Schema.org property that used to store the main entity.
  /** @var \Drupal\schemadotorg\SchemaDotOrgSchemaTypeManagerInterface $schema_type_manager */
  $schema_type_manager = \Drupal::service('schemadotorg.schema_type_manager');
  if ($schema_type_manager->isPropertyMainEntity($schema_property)) {
    return;
  }

  // Get expected target bundles.
  $target_type = $field->getSetting('target_type');
  $expected_target_bundles = $mapping_storage->getSchemaPropertyTargetBundles($target_type, $schema_type, $schema_property);

  // Get actual target bundles.
  $handler_settings = $field->getSetting('handler_settings');
  $actual_target_bundles = $handler_settings['target_bundles'];

  // Display warning when the expected and selected bundles do not match.
  if ($expected_target_bundles != $actual_target_bundles) {
    $target_label = ($target_type === 'paragraph')
      ? t('Paragraph types')
      : \Drupal::entityTypeManager()->getDefinition($target_type)->getPluralLabel();

    /** @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info */
    $entity_type_bundle_info = \Drupal::service('entity_type.bundle.info');
    $bundle_info = $entity_type_bundle_info->getBundleInfo($target_type);
    $bundles = [];
    foreach ($expected_target_bundles as $schema_target_bundle) {
      $bundles[] = NestedArray::getValue($bundle_info, [$schema_target_bundle, 'label']) ?: $schema_target_bundle;
    }

    $t_args = [
      '@type' => $target_label,
      '%bundles' => implode('; ', $bundles),
    ];
    $message = t('The expected @type should include %bundles.', $t_args);
    \Drupal::messenger()->addWarning($message);
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 *
 * @todo Move this to SchemaDotOrgMapping::onDependencyRemoval.
 * @see \Drupal\schemadotorg\Entity\SchemaDotOrgMapping::onDependencyRemoval
 */
function schemadotorg_field_config_delete(EntityInterface $entity): void {
  $bundle = $entity->getTargetBundle();
  $entity_type = $entity->getTargetEntityTypeId();

  // Make sure a property is removed.
  /** @var \Drupal\schemadotorg\SchemaDotOrgMappingInterface $mapping */
  $mapping = SchemaDotOrgMapping::load("$entity_type.$bundle");
  if ($mapping) {
    $mapping->removeSchemaProperty($entity->getName());
  }
}
