<?php

/**
 * @file
 * Provides a volunteer sign up and waver entity type.
 */

use Drupal\Core\Render\Element;
use Drupal\user\UserInterface;
use Drupal\volunteer_sign_up_record\Entity\VolunteerSignUpAndWaver;

/**
 * Implements hook_theme().
 */
function volunteer_sign_up_record_theme() {
  return [
    'volunteer_sign_up_and_waver' => [
      'render element' => 'elements',
    ],
  ];
}

/**
 * Prepares variables for volunteer sign up and waver templates.
 *
 * Default template: volunteer-sign-up-and-waver.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the volunteer sign up and waver information and any
 *     fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_volunteer_sign_up_and_waver(array &$variables) {
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Implements hook_user_cancel().
 */
function volunteer_sign_up_record_user_cancel($edit, UserInterface $account, $method) {
  switch ($method) {
    case 'user_cancel_reassign':
      // Anonymize volunteer sign up and wavers.
      $storage = \Drupal::entityTypeManager()->getStorage('volunteer_sign_up_and_waver');
      $volunteer_sign_up_and_waver_ids = $storage->getQuery()
        ->condition('uid', $account->id())
        ->execute();
      foreach ($storage->loadMultiple($volunteer_sign_up_and_waver_ids) as $volunteer_sign_up_and_waver) {
        $volunteer_sign_up_and_waver->setOwnerId(0);
        $volunteer_sign_up_and_waver->save();
      }
      break;
  }
}

/**
 * Implements hook_ENTITY_TYPE_predelete() for user entities.
 */
function volunteer_sign_up_record_user_predelete(UserInterface $account) {
  // Delete volunteer sign up and wavers.
  $storage = \Drupal::entityTypeManager()->getStorage('volunteer_sign_up_and_waver');
  $volunteer_sign_up_and_waver_ids = $storage->getQuery()
    ->condition('uid', $account->id())
    ->execute();
  $volunteer_sign_up_and_wavers = $storage->loadMultiple($volunteer_sign_up_and_waver_ids);
  $storage->delete($volunteer_sign_up_and_wavers);
  // Delete old revisions.
  $volunteer_sign_up_and_waver_ids = $storage->getQuery()
    ->allRevisions()
    ->condition('uid', $account->id())
    ->execute();
  foreach (array_keys($volunteer_sign_up_and_waver_ids) as $revision_id) {
    $storage->deleteRevision($revision_id);
  }
}
